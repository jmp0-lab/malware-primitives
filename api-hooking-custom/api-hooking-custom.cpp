#include <Windows.h>
#include "misc.h"

#define TRAMPOLINE_SIZE 12

int MessageBoxWCustom(
	HWND    hWnd,
	LPCWSTR lpText,
	LPCWSTR lpCaption,
	UINT    uType
)
{
	wprintf(L"[*] hWnd: 0x%p, lpText: \"%s\", lpCaption: \"%s\", uType: %i\n", hWnd, lpText, lpCaption, uType);

	return 0;
}

int main()
{
	BYTE pbTrampoline[] = {
		0x48, 0xb8, 0, 0, 0, 0, 0, 0, 0, 0,		// mov rax, 0000000000000000
		0xff, 0xe0								// jmp rax
	};
	
	PVOID	pOriginal = MessageBoxW;
	PVOID	pDetour = MessageBoxWCustom;
	PBYTE	pbOriginalBytes = (PBYTE)VirtualAlloc(NULL, sizeof(pbTrampoline), MEM_COMMIT, PAGE_READWRITE);
	DWORD	dwOriginalProtection = 0;

	BOOL bRet = FALSE;
	WCHAR szAcessProtectionString[1024] = { 0 };

	do
	{
		MessageBoxW(NULL, L"message #1", L"Detour test", MB_OK);
		
		wprintf(L"[i] Blank trampoline:\n");
		printHex(pbTrampoline, sizeof(pbTrampoline));

		wprintf(L"[i] Trampoline with Detour address (0x%p):\n", pDetour);
		memcpy(&pbTrampoline[2], &pDetour, sizeof(pDetour));
		printHex(pbTrampoline, sizeof(pbTrampoline));

		wprintf(L"[i] Making copy of original function beginning (0x%p):\n", pOriginal);
		memcpy(pbOriginalBytes, pOriginal, sizeof(pbTrampoline));
		printHex(pbOriginalBytes, sizeof(pbTrampoline));

		wprintf(L"[i] Making original memory area PAGE_EXECUTE_READWRITE... ");
		bRet = VirtualProtect(pOriginal, sizeof(pbTrampoline), PAGE_EXECUTE_READWRITE, &dwOriginalProtection);
		if (!bRet)
		{
			printError(L"VirtualProtect");
			break;
		}
		memset(szAcessProtectionString, 0, sizeof(WCHAR) * 1024);
		getAccessProtectionString(dwOriginalProtection, szAcessProtectionString);
		wprintf(L"done, old rights: %ls\n", szAcessProtectionString);

		wprintf(L"[i] Installing hook at 0x%p... ", pOriginal);
		memcpy(pOriginal, pbTrampoline, sizeof(pbTrampoline));
		wprintf(L"done\n");
		
		MessageBoxW(NULL, L"message #2", L"Detour test", MB_OK);

		wprintf(L"[i] Removing hook from 0x%p... ", pOriginal);
		memcpy(pOriginal, pbOriginalBytes, sizeof(pbTrampoline));
		wprintf(L"done\n");

		wprintf(L"[i] Reverting memory access permission... ");
		bRet = VirtualProtect(pOriginal, sizeof(pbTrampoline), dwOriginalProtection, &dwOriginalProtection);
		if (!bRet)
		{
			printError(L"VirtualProtect");
			break;
		}
		memset(szAcessProtectionString, 0, sizeof(WCHAR) * 1024);
		getAccessProtectionString(dwOriginalProtection, szAcessProtectionString);
		wprintf(L"done, old rights: %ls\n", szAcessProtectionString);

		MessageBoxW(NULL, L"message #3", L"Detour test", MB_OK);

	} while (FALSE);

	if (pbOriginalBytes)
	{
		VirtualFree(pbOriginalBytes, 0, MEM_RELEASE);
	}

	return 0;
}