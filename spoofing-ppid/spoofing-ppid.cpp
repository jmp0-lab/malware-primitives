#include <Windows.h>
#include "misc.h"
#include "process-enumeration-ntquerysystemInformation-lib.h"


int main()
{
	BOOL bRet = FALSE;

	LPCWSTR szProcNameParent = L"msedge.exe";
	DWORD pdwPid[1024] = { 0 };
	HANDLE phProcess[1024] = { 0 };
	DWORD dwProcesses = 1024;

	WCHAR szPathChild[] = L"C:\\Windows\\System32\\notepad.exe";

	SIZE_T lpSize = NULL;
	PPROC_THREAD_ATTRIBUTE_LIST lpAttributeList = NULL;

	STARTUPINFOEXW SiEx = { 0 };
	PROCESS_INFORMATION Pi = { 0 };
	SiEx.StartupInfo.cb = sizeof(STARTUPINFOEXW);

	//RtlSecureZeroMemory(&SiEx, sizeof(STARTUPINFOEXW));
	//RtlSecureZeroMemory(&Pi, sizeof(PROCESS_INFORMATION));

	do {
		bRet = GetRemoteProcessHandleNtQuerySystemInformation(szProcNameParent, pdwPid, phProcess, &dwProcesses);
		if (!bRet)
		{
			break;
		}

		int idx = 0;
		DWORD dwPidParent = pdwPid[idx];
		HANDLE phProcessParent = phProcess[idx];

		wprintf(L"[i] Get ProcThreadAttributeList size... ");
		InitializeProcThreadAttributeList(NULL, 1, NULL, &lpSize);
		if (lpSize == 0)
		{
			printError(L"InitializeProcThreadAttributeList");
			break;
		}
		wprintf(L"done, %lld\n", lpSize);

		wprintf(L"[i] Allocating memory for ProcThreadAttributeList... ");
		lpAttributeList = (PPROC_THREAD_ATTRIBUTE_LIST)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, lpSize);
		if (lpAttributeList == NULL)
		{
			printError(L"HeapAlloc");
			break;
		}
		wprintf(L"done, 0x%p\n", lpAttributeList);

		wprintf(L"[i] Get ProcThreadAttributeList... ");
		bRet = InitializeProcThreadAttributeList(lpAttributeList, 1, NULL, &lpSize);
		if (!bRet)
		{
			printError(L"InitializeProcThreadAttributeList");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Updating ProcThreadAttributeList with PROC_THREAD_ATTRIBUTE_PARENT_PROCESS: %d (\"%s\")... ", dwPidParent, szProcNameParent);
		bRet = UpdateProcThreadAttribute(lpAttributeList, NULL, PROC_THREAD_ATTRIBUTE_PARENT_PROCESS, &phProcessParent, sizeof(HANDLE), NULL, NULL);
		if (!bRet)
		{
			printError(L"UpdateProcThreadAttribute");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Setting new ProcThreadAttributeList values... ");
		SiEx.lpAttributeList = lpAttributeList;
		wprintf(L"done\n");

		wprintf(L"[i] Create child process... ");
		bRet = CreateProcessW(
			NULL,
			szPathChild,
			NULL,
			NULL,
			FALSE,
			EXTENDED_STARTUPINFO_PRESENT,
			NULL,
			NULL,
			&SiEx.StartupInfo,
			&Pi);
		if (!bRet)
		{
			printError(L"CreateProcessW");
			break;
		}
		wprintf(L"done, PID: %d, ThreadId: %d\n", Pi.dwProcessId, Pi.dwThreadId);

		DeleteProcThreadAttributeList(lpAttributeList);

	} while (FALSE);

	return 0;
}