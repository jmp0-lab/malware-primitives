#include <Windows.h>
#include "misc.h"


int main()
{
	WCHAR szPath[MAX_PATH] = { 0 };
	DWORD dwRet = 0;
	BOOL bRet = FALSE;
	HANDLE hFile = NULL;

	FILE_DISPOSITION_INFO stFileDispositionInfo = { 0 };
	PFILE_RENAME_INFO pRename = NULL;

	WCHAR szNewStream[] = L":NewStreamName";
	DWORD dwNewStream = (DWORD)wcslen(szNewStream) * sizeof(WCHAR);

	DWORD dwRename = sizeof(FILE_RENAME_INFO) + dwNewStream;
	

	do {
		wprintf(L"[i] Get current file path... ");
		dwRet = GetModuleFileNameW(NULL, szPath, MAX_PATH * 2);
		if (dwRet == 0 || dwRet == MAX_PATH)
		{
			printError(L"GetModuleFileNameW");
			break;
		}
		wprintf(L"done: \"%s\"\n", szPath);

		wprintf(L"[i] Open handle to current file... ");
		hFile = CreateFileW(szPath, DELETE | SYNCHRONIZE, FILE_SHARE_READ, NULL, OPEN_EXISTING, NULL, NULL);
		if (hFile == INVALID_HANDLE_VALUE)
		{
			printError(L"CreateFileW");
			break;
		}
		wprintf(L"done: %p\n", hFile);

		//wprintf(L"[i] Allocate memory for FILE_RENAME_INFO structure... ");
		pRename = (PFILE_RENAME_INFO)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, dwRename);
		if (!pRename) {
			printError(L"HeapAlloc");
			break;
		}
		//wprintf(L"done: %p\n", pRename);

		stFileDispositionInfo.DeleteFile = TRUE;
		
		pRename->FileNameLength = dwNewStream;
		RtlCopyMemory(pRename->FileName, szNewStream, dwNewStream);

		wprintf(L"[i] Rename \":$DATA\" to \"%s\"... ", szNewStream);
		bRet = SetFileInformationByHandle(hFile, FileRenameInfo, pRename, dwRename);
		if (!bRet)
		{
			printError(L"SetFileInformationByHandle");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Refresh handle to current file... ");
		CloseHandle(hFile);

		hFile = CreateFileW(szPath, DELETE | SYNCHRONIZE, FILE_SHARE_READ, NULL, OPEN_EXISTING, NULL, NULL);
		if (hFile == INVALID_HANDLE_VALUE)
		{
			printError(L"CreateFileW");
			break;
		}
		wprintf(L"done: %p\n", hFile);

		wprintf(L"[i] Mark file for deletion after handle is closed... ");
		bRet = SetFileInformationByHandle(hFile, FileDispositionInfo, &stFileDispositionInfo, sizeof(stFileDispositionInfo));
		if (!bRet)
		{
			printError(L"SetFileInformationByHandle");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[#] Press any key... ");
		getchar();

		wprintf(L"[*] Close the handle... ");
		bRet = CloseHandle(hFile);
		if (!bRet)
		{
			printError(L"CloseHandle");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[#] Press any key... ");
		getchar();

	} while (FALSE);

	if(pRename)
	{
		HeapFree(GetProcessHeap(), 0, pRename);
	}

	return 0;
}