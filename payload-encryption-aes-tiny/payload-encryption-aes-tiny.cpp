#include <Windows.h>
#include "aes.hpp"
#include "misc.h"

// for AES 128 CBC mode:
#define KEYSIZE 32
#define IVSIZE 16

BOOL PaddBuffer(IN PBYTE InputBuffer, IN SIZE_T InputBufferSize, OUT PBYTE* OutputPaddedBuffer, OUT SIZE_T* OutputPaddedSize) {

	PBYTE	PaddedBuffer = NULL;
	SIZE_T	PaddedSize = NULL;

	// calculate the nearest number that is multiple of 16 and saving it to PaddedSize
	PaddedSize = InputBufferSize + 16 - (InputBufferSize % 16);

	// allocating buffer of size "PaddedSize"
	PaddedBuffer = (PBYTE)HeapAlloc(GetProcessHeap(), 0, PaddedSize);
	if (!PaddedBuffer)
	{
		printError(L"HeapAlloc");
		return FALSE;
	}
	
	// cleaning the allocated buffer
	ZeroMemory(PaddedBuffer, PaddedSize);
	
	// copying old buffer to new padded buffer
	memcpy(PaddedBuffer, InputBuffer, InputBufferSize);
	
	//saving results :
	*OutputPaddedBuffer = PaddedBuffer;
	*OutputPaddedSize = PaddedSize;

	return TRUE;
}

int main()
{
	// msfvenom -p windows/exec CMD=notepad.exe -f c
	BYTE pClear[] =
		"\xfc\xe8\x82\x00\x00\x00\x60\x89\xe5\x31\xc0\x64\x8b\x50"
		"\x30\x8b\x52\x0c\x8b\x52\x14\x8b\x72\x28\x0f\xb7\x4a\x26"
		"\x31\xff\xac\x3c\x61\x7c\x02\x2c\x20\xc1\xcf\x0d\x01\xc7"
		"\xe2\xf2\x52\x57\x8b\x52\x10\x8b\x4a\x3c\x8b\x4c\x11\x78"
		"\xe3\x48\x01\xd1\x51\x8b\x59\x20\x01\xd3\x8b\x49\x18\xe3"
		"\x3a\x49\x8b\x34\x8b\x01\xd6\x31\xff\xac\xc1\xcf\x0d\x01"
		"\xc7\x38\xe0\x75\xf6\x03\x7d\xf8\x3b\x7d\x24\x75\xe4\x58"
		"\x8b\x58\x24\x01\xd3\x66\x8b\x0c\x4b\x8b\x58\x1c\x01\xd3"
		"\x8b\x04\x8b\x01\xd0\x89\x44\x24\x24\x5b\x5b\x61\x59\x5a"
		"\x51\xff\xe0\x5f\x5f\x5a\x8b\x12\xeb\x8d\x5d\x6a\x01\x8d"
		"\x85\xb2\x00\x00\x00\x50\x68\x31\x8b\x6f\x87\xff\xd5\xbb"
		"\xf0\xb5\xa2\x56\x68\xa6\x95\xbd\x9d\xff\xd5\x3c\x06\x7c"
		"\x0a\x80\xfb\xe0\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x53"
		"\xff\xd5\x6e\x6f\x74\x65\x70\x61\x64\x2e\x65\x78\x65\x00";

	DWORD sClear = (sizeof(pClear) / sizeof(BYTE)) - 1;

	BYTE pKey[] =
		"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00"
		"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";

	DWORD sKey = (sizeof(pKey) / sizeof(BYTE)) - 1;

	BYTE pIv[] =
		"\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00\x00";

	DWORD sIv = (sizeof(pIv) / sizeof(BYTE)) - 1;

	printHex(pKey, sKey);
	printHex(pIv, sIv);

	// Initializing variables that will hold the new buffer base address in the case where padding is required and its size
	PBYTE	pPadded = NULL;
	SIZE_T	sPadded = NULL;

	// Padding the buffer, if required
	if (sClear % 16 != 0)
	{
		PaddBuffer(pClear, sClear, &pPadded, &sPadded);
	}
	else
	{
		pPadded = pClear;
		sPadded = sClear;
	}
	
	printHex(pPadded, sPadded);

	struct AES_ctx ctx;
	AES_init_ctx_iv(&ctx, pKey, pIv);

	// Encrypting the padded buffer instead
	AES_CBC_encrypt_buffer(&ctx, pPadded, sPadded);

	// Printing encrypted buffer to the console
	printHex(pPadded, sPadded);

	AES_init_ctx_iv(&ctx, pKey, pIv);
	AES_CBC_decrypt_buffer(&ctx, pPadded, sPadded);

	// Printing decrypted buffer to the console
	printHex(pPadded, sPadded);

	// Freeing PaddedBuffer, if necessary
	if (pPadded != NULL) {
		HeapFree(GetProcessHeap(), 0, pPadded);
	}

	return 0;
}