#include "payload-obfuscation-uuid-lib.h"
#include "misc.h"


BOOL payloadToUUIDs(IN PBYTE pbPayload, IN SIZE_T ulPayload, OUT LPWSTR pszUUIDs, IN SIZE_T& ulUUIDs)
{
    RPC_STATUS rs = NULL;
    RPC_WSTR szUuid = NULL;

    SIZE_T ulRound = 0;
    UUID uuid = { 0 };

    errno_t err = 0;

    if (ulPayload % 16 != 0)
    {
        wprintf(L"[!] Input buffer size needs to be (%% 16 == 0), add %Id bytes of padding.\n", (16 - (ulPayload % 16)));
        return FALSE;
    }

    for (; ulRound < ulPayload / 16; ulRound++)
    {
        uuid = { 0 };

        uuid.Data1 = *((unsigned long*)&pbPayload[ulRound * 16 + 0]);
        uuid.Data2 = *((unsigned short*)&pbPayload[ulRound * 16 + 4]);
        uuid.Data3 = *((unsigned short*)&pbPayload[ulRound * 16 + 6]);

        uuid.Data4[0] = *((unsigned char*)&pbPayload[ulRound * 16 + 8]);
        uuid.Data4[1] = *((unsigned char*)&pbPayload[ulRound * 16 + 9]);
        uuid.Data4[2] = *((unsigned char*)&pbPayload[ulRound * 16 + 10]);
        uuid.Data4[3] = *((unsigned char*)&pbPayload[ulRound * 16 + 11]);
        uuid.Data4[4] = *((unsigned char*)&pbPayload[ulRound * 16 + 12]);
        uuid.Data4[5] = *((unsigned char*)&pbPayload[ulRound * 16 + 13]);
        uuid.Data4[6] = *((unsigned char*)&pbPayload[ulRound * 16 + 14]);
        uuid.Data4[7] = *((unsigned char*)&pbPayload[ulRound * 16 + 15]);

        rs = UuidToStringW(&uuid, &szUuid);
        if (rs != RPC_S_OK)
        {
            printRpcStatus(L"UuidToStringW", rs);
            return FALSE;
        }

        //wprintf(L"%s\n", (LPWSTR)szUuid);

        err = wcscat_s(pszUUIDs, ulUUIDs, (LPWSTR)szUuid);
        if (err != 0)
        {
            printError(L"wcscat_s");
            return FALSE;

        }

        ulUUIDs = ulUUIDs - 16;

        err = wcscat_s(pszUUIDs, ulUUIDs, L",");
        if (err != 0)
        {
            printError(L"wcscat_s");
            return FALSE;

        }

        ulUUIDs = ulUUIDs - 1;
    }

    return TRUE;
}

BOOL UUIDsToPayload(IN LPWSTR pszUUIDs, OUT PBYTE pbPayload, OUT SIZE_T& ulPayload)
{
    DWORD dwPayloadIdx = 0;

    LPWSTR psTokenUUID = NULL;
    LPWSTR psContexUUID = NULL;

    UUID uuid = { 0 };

    RPC_STATUS rs = NULL;

    psTokenUUID = wcstok_s(pszUUIDs, L",", &psContexUUID);
    while (psTokenUUID != NULL)
    {
        rs = UuidFromStringW((RPC_WSTR)psTokenUUID, &uuid);
        if (rs != RPC_S_OK)
        {
            printRpcStatus(L"UuidToStringW", rs);
            return FALSE;
        }

        memcpy_s(pbPayload, ulPayload - dwPayloadIdx * 16, &uuid, 16);
        pbPayload = pbPayload + 16;

        psTokenUUID = wcstok_s(NULL, L",", &psContexUUID);

        ++dwPayloadIdx;
    }

    return TRUE;
}