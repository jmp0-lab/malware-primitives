#include <wchar.h>
#include "misc.h"
#include "payload-staging-registry-lib.h"


BOOL writeBytesToRegistry(IN HKEY hKey, IN LPCWSTR lpszSubKey, IN LPCWSTR lpszValueName, IN PBYTE pbBuf, IN SIZE_T ulBuf)
{
	BOOL bOutput = FALSE;
	BOOL bRet = FALSE;
	LSTATUS lStatus = NULL;
	HKEY hReg = NULL;


	wprintf(L"[>] Writing bytes to registry: START\n");
	wprintf(L"[i] Writing %zu bytes to subkey \"%s\" to key \"%s\"\n", ulBuf, lpszSubKey, lpszValueName);
	printHex(pbBuf, ulBuf);

	do
	{
		wprintf(L"\t[i] Opening registry handle... ");
		lStatus = RegOpenKeyExW(hKey, lpszSubKey, 0, KEY_SET_VALUE, &hReg);
		if (lStatus != ERROR_SUCCESS)
		{
			printError(L"RegOpenKeyExW", lStatus);
			break;
		}
		wprintf(L"done\n");

		wprintf(L"\t[i] Writing bytes... ");
		lStatus = RegSetValueExW(hReg, lpszValueName, 0, REG_BINARY, pbBuf, (DWORD)ulBuf);
		if (lStatus != ERROR_SUCCESS)
		{
			printError(L"RegSetValueExW", lStatus);
			break;
		}
		wprintf(L"done\n");

		bOutput = TRUE;

	} while (FALSE);

	if (hReg)
	{
		wprintf(L"\t[i] Closing registry handle... ");
		lStatus = RegCloseKey(hReg);
		if (lStatus != ERROR_SUCCESS)
		{
			printError(L"RegCloseKey", lStatus);
		}
		else
		{
			wprintf(L"done\n");
		}
	}

	wprintf(L"[<] Writing bytes to registry: %s", (bOutput) ? L"DONE\n" : L"ERROR\n");

	return bOutput;
}


BOOL readBytesFromRegistry(IN HKEY hKey, IN LPCWSTR lpszSubKey, IN LPCWSTR lpszValueName, OUT BYTE **ppbBuf, OUT SIZE_T &ulBuf)
{
	BOOL bOutput = FALSE;
	BOOL bRet = FALSE;
	LSTATUS lStatus = NULL;
	HKEY hReg = NULL;


	wprintf(L"[>] Reading bytes from registry: START\n");
	wprintf(L"[i] Reading from subkey \"%s\" from key \"%s\"\n", lpszSubKey, lpszValueName);

	do
	{
		wprintf(L"\t[i] Opening registry handle... ");
		lStatus = RegOpenKeyExW(hKey, lpszSubKey, 0, KEY_SET_VALUE, &hReg);
		if (lStatus != ERROR_SUCCESS)
		{
			printError(L"RegOpenKeyExW", lStatus);
			break;
		}
		wprintf(L"done\n");

		wprintf(L"\t[i] Reading blob size... ");
		lStatus = RegGetValueW(HKEY_CURRENT_USER, lpszSubKey, lpszValueName, RRF_RT_ANY, NULL, NULL, (LPDWORD) &ulBuf);
		if (lStatus != ERROR_SUCCESS)
		{
			printError(L"RegGetValueW", lStatus);
			break;
		}
		wprintf(L"done, size: %d\n", (DWORD)ulBuf);

		wprintf(L"\t[i] Allocating buffer for data... ");
		*ppbBuf = (PBYTE)HeapAlloc(GetProcessHeap(), HEAP_ZERO_MEMORY, ulBuf);
		if (*ppbBuf == NULL)
		{
			printError(L"HeapAlloc");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"\t[i] Reading data... ");
		lStatus = RegGetValueW(HKEY_CURRENT_USER, lpszSubKey, lpszValueName, RRF_RT_ANY, NULL, *ppbBuf, (LPDWORD) &ulBuf);
		if (lStatus != ERROR_SUCCESS)
		{
			printError(L"RegGetValueW", lStatus);
			break;
		}
		wprintf(L"done, size: %d\n", (DWORD)ulBuf);

		//printHex(pbBuf, ulBuf);

		bOutput = TRUE;

	} while (FALSE);

	if (hReg)
	{
		wprintf(L"\t[i] Closing registry handle... ");
		lStatus = RegCloseKey(hReg);
		if (lStatus != ERROR_SUCCESS)
		{
			printError(L"RegCloseKey", lStatus);
		}
		else
		{
			wprintf(L"done\n");
		}
	}

	wprintf(L"[<] Reading bytes from registry: %s", (bOutput) ? L"DONE\n" : L"ERROR\n");

	return bOutput;
}
