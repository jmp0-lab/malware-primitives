#include <Windows.h>
#include <psapi.h>
#include "misc.h"
#include "process-enumeration-enumprocesses-lib.h"


BOOL GetRemoteProcessHandleEnumProcesses(IN LPCWSTR szProcName, OUT DWORD* pdwPid, OUT HANDLE* phProcess, IN OUT DWORD* dwProcesses)
{
	DWORD dwOutSize = 0;
	
	BOOL bRet = FALSE;
	
	DWORD adwPidProcess[4096] = { 0 };
	DWORD cbProcesses = 0;
	
	HANDLE hProcess = NULL;

	HMODULE adwModules[4096] = { 0 };
	DWORD cbModules = 0;

	WCHAR szBaseModuleName[4094] = { 0 };

	wprintf(L"[>] Looking for process: START\n");
	wprintf(L"[i] Process name: \"%s\"\n", szProcName);
	do 
	{
		wprintf(L"\t[i] Enumerating processes (EnumProcesses)... ");
		bRet = EnumProcesses(adwPidProcess, sizeof(adwPidProcess), &cbProcesses);
		if (!bRet)
		{
			printError(L"EnumProcesses");
			break;
		}
		wprintf(L"done\n");

		for (INT i = 0; i < cbProcesses / sizeof(DWORD); ++i)
		{
			if (dwOutSize >= *dwProcesses)
			{
				break;
			}
		
			wprintf(L"\t[i] Openning process PID: %d... ", adwPidProcess[i]);
			hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, adwPidProcess[i]);
			if (hProcess == NULL)
			{
				printError(L"OpenProcess");
				continue;
			}
			wprintf(L"done, handle: 0x%p\n", hProcess);

			wprintf(L"\t[i] Enumerating modules in process PID: %d... ", adwPidProcess[i]);
			bRet = K32EnumProcessModules(hProcess, adwModules, sizeof(adwModules), &cbModules);
			if (!bRet)
			{
				printError(L"K32EnumProcessModules");
				continue;
			}
			wprintf(L"done, number of modules: %d\n", cbModules / sizeof(HMODULE));

			wprintf(L"\t[i] Getting name of first module in process PID: %d... ", adwPidProcess[i]);
			bRet = GetModuleBaseNameW(hProcess, NULL, szBaseModuleName, sizeof(szBaseModuleName) / sizeof(WCHAR));
			if (!bRet)
			{
				printError(L"GetModuleBaseNameW");
				continue;
			}
			wprintf(L"done, name: \"%s\"\n", szBaseModuleName);

			if (wcscmp(szProcName, szBaseModuleName) == 0)
			{
				pdwPid[dwOutSize] = adwPidProcess[i];
				phProcess[dwOutSize] = hProcess;

				++dwOutSize;

				wprintf(L"\t[+] ProcessName: \"%s\" FOUND, PID: %d, hProcess: 0x%p\n", szBaseModuleName, adwPidProcess[i], hProcess);
			}
			else
			{
				CloseHandle(hProcess);
			}
		}


	} while (FALSE);

	
	*dwProcesses = dwOutSize;

	if (dwOutSize == 0)
	{
		wprintf(L"[<] Looking for process: ERROR\n");
		return FALSE;
	}

	wprintf(L"[<] Looking for process: DONE\n");
	return TRUE;
}