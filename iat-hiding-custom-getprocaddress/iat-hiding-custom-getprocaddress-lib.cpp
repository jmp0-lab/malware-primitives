#include "iat-hiding-custom-getprocaddress-lib.h"
#include "misc.h"
#include "djb2.h"


FARPROC GetProcAddressCustom(
	IN HMODULE hModule,
	IN DWORD dwProcNameHash
)
{
	PBYTE pBase = (PBYTE)hModule;
	CHAR* pFunctionName = NULL;
	PVOID pFunctionAddress = NULL;
	BOOL bFound = FALSE;

	WCHAR szBuf[1024] = { 0 };
	errno_t errRet = 0;
	size_t convertedChars = 0;
	DWORD dwHashBuf = 0;

	wprintf(L"[>] Custom GetProcAddress: START\n");
	printf("\t[i] hModule: 0x%p, dwProcNameHash: %#08x\n", hModule, dwProcNameHash);

	do {
		PIMAGE_DOS_HEADER pImgDosHdr = (PIMAGE_DOS_HEADER)pBase;

		PIMAGE_NT_HEADERS pImgNtHdrs = (PIMAGE_NT_HEADERS)(pBase + pImgDosHdr->e_lfanew);

		IMAGE_OPTIONAL_HEADER ImgOptHdr = pImgNtHdrs->OptionalHeader;

		PIMAGE_EXPORT_DIRECTORY pImgExportDir = (PIMAGE_EXPORT_DIRECTORY)(pBase + ImgOptHdr.DataDirectory[IMAGE_DIRECTORY_ENTRY_EXPORT].VirtualAddress);

		PDWORD FunctionNameArray = (PDWORD)(pBase + pImgExportDir->AddressOfNames);
		PDWORD FunctionAddressArray = (PDWORD)(pBase + pImgExportDir->AddressOfFunctions);
		PWORD FunctionOrdinalArray = (PWORD)(pBase + pImgExportDir->AddressOfNameOrdinals);

		for (DWORD i = 0; i < pImgExportDir->NumberOfFunctions; i++)
		{
			pFunctionName = (CHAR*)(pBase + FunctionNameArray[i]);
			pFunctionAddress = (PVOID)(pBase + FunctionAddressArray[FunctionOrdinalArray[i]]);

			//printf("\t[i] pFunctionName: %s -> %#08x, pFunctionAddress: 0x%p, pFunctionAddressOrdinal: %d\n", pFunctionName, dwHashBuf, pFunctionAddress, FunctionOrdinalArray[i]);

			errRet = mbstowcs_s(&convertedChars, szBuf, strlen(pFunctionName) + 1, pFunctionName, _TRUNCATE);
			if (errRet)
			{
				break;
			}
			_wcslwr_s(szBuf, sizeof(szBuf) / sizeof(WCHAR));
			dwHashBuf = djb2_hash(szBuf);

			if (dwProcNameHash == dwHashBuf) {
				bFound = TRUE;
				printf("\t[i] pFunctionName: %s -> %#08x, pFunctionAddress: 0x%p, pFunctionAddressOrdinal: %d\n", pFunctionName, dwHashBuf, pFunctionAddress, FunctionOrdinalArray[i]);
				break;
			}
		}

	} while (FALSE);

	wprintf(L"[<] Custom GetProcAddress: ");

	if (!bFound)
	{
		pFunctionAddress = NULL;
		wprintf(L"FAILED\n");
	}
	else
	{
		wprintf(L"DONE\n");
	}

	return (FARPROC)pFunctionAddress;
}