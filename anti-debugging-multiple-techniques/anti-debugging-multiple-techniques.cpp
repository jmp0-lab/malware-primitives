#include <Windows.h>
#include "misc.h"

// https://anti-debug.checkpoint.com/techniques/debug-flags.html

typedef NTSTATUS(NTAPI* fnNtQueryInformationProcess)(
	IN HANDLE           ProcessHandle,
	IN PROCESSINFOCLASS ProcessInformationClass,
	OUT PVOID           ProcessInformation,
	IN ULONG            ProcessInformationLength,
	OUT PULONG          ReturnLength
);

typedef struct _SYSTEM_KERNEL_DEBUGGER_INFORMATION {
	BOOLEAN DebuggerEnabled;
	BOOLEAN DebuggerNotPresent;
} SYSTEM_KERNEL_DEBUGGER_INFORMATION, * PSYSTEM_KERNEL_DEBUGGER_INFORMATION;

// https://doxygen.reactos.org/d6/d9e/include_2reactos_2wine_2winternl_8h_source.html


BOOL chk_IsDebuggerPresent()
{
	BOOL bRet = FALSE;

	wprintf(L"[*] IsDebuggerPresent(): ");

	bRet = IsDebuggerPresent();

	wprintf(L"%s\n", (bRet) ? L"yes" : L"no");
	return bRet;
}

BOOL chk_CheckRemoteDebuggerPresent()
{
	BOOL bErr = FALSE;
	BOOL bRet = FALSE;

	wprintf(L"[*] CheckRemoteDebuggerPresent(): ");

	bErr = CheckRemoteDebuggerPresent(GetCurrentProcess(), &bRet);
	if (!bErr)
	{
		wprintf(L"CheckRemoteDebuggerPresent");
	}

	wprintf(L"%s\n", (bRet) ? L"yes" : L"no");
	return bRet;
}

BOOL chk_BeingDebugged()
{
	PPEB pPeb = (PEB*)(__readgsqword(0x60)); // x64
	BOOL bRet = FALSE;

	wprintf(L"[*] (pPeb->BeingDebugged == 1): ");

	bRet = (pPeb->BeingDebugged == 1);

	wprintf(L"%s\n", (bRet) ? L"yes" : L"no");
	return bRet;
}

BOOL chk_NtGlobalFlag()
{
	PPEB pPeb = (PEB*)(__readgsqword(0x60)); // x64
	BOOL bRet = FALSE;

	wprintf(L"[*] (pPeb->NtGlobalFlag == 0x70): ");

	DWORD NtGlobalFlag = *(PDWORD)((PBYTE)pPeb + 0xBC); // x64
	bRet = (NtGlobalFlag == 0x70);

	wprintf(L"%s\n", (bRet) ? L"yes" : L"no");
	return bRet;
}

BOOL chk_ProcessDebugPort()
{
	BOOL bRet = FALSE;
	HMODULE hNtdll = LoadLibraryA("ntdll.dll");

	wprintf(L"[*] NtQueryInformationProcess / ProcessDebugPort: ");

	if (hNtdll)
	{
		auto pfnNtQueryInformationProcess = (fnNtQueryInformationProcess)GetProcAddress(hNtdll, "NtQueryInformationProcess");

		if (pfnNtQueryInformationProcess)
		{
			DWORD dwProcessDebugPort = 0;
			DWORD dwReturned = 0;

			NTSTATUS status = pfnNtQueryInformationProcess(
				GetCurrentProcess(),
				ProcessDebugPort,
				&dwProcessDebugPort,
				sizeof(DWORD),
				&dwReturned);

			if (NT_SUCCESS(status) && (-1 == dwProcessDebugPort))
				bRet = TRUE;
		}
	}

	wprintf(L"%s\n", (bRet) ? L"yes" : L"no");
	return bRet;
}

BOOL chk_ProcessDebugFlags()
{
	BOOL bRet = FALSE;
	HMODULE hNtdll = LoadLibraryA("ntdll.dll");

	wprintf(L"[*] NtQueryInformationProcess / ProcessDebugFlags: ");

	if (hNtdll)
	{
		auto pfnNtQueryInformationProcess = (fnNtQueryInformationProcess)GetProcAddress(hNtdll, "NtQueryInformationProcess");

		if (pfnNtQueryInformationProcess)
		{
			DWORD dwProcessDebugFlags = 0;
			DWORD dwReturned = 0;

			const PROCESSINFOCLASS ProcessDebugFlags = (PROCESSINFOCLASS)0x1f;

			NTSTATUS status = pfnNtQueryInformationProcess(
				GetCurrentProcess(),
				ProcessDebugFlags,
				&dwProcessDebugFlags,
				sizeof(DWORD),
				&dwReturned);

			if (NT_SUCCESS(status) && (0 == dwProcessDebugFlags))
				bRet = TRUE;
		}
	}

	wprintf(L"%s\n", (bRet) ? L"yes" : L"no");
	return bRet;
}

BOOL chk_ProcessDebugObjectHandle()
{
	BOOL bRet = FALSE;
	HMODULE hNtdll = LoadLibraryA("ntdll.dll");

	wprintf(L"[*] NtQueryInformationProcess / ProcessDebugObjectHandle: ");

	if (hNtdll)
	{
		auto pfnNtQueryInformationProcess = (fnNtQueryInformationProcess)GetProcAddress(hNtdll, "NtQueryInformationProcess");

		if (pfnNtQueryInformationProcess)
		{
			DWORD dwReturned = 0;
			HANDLE hProcessDebugObject = 0;

			const PROCESSINFOCLASS ProcessDebugObjectHandle = (PROCESSINFOCLASS)0x1e;

			NTSTATUS status = pfnNtQueryInformationProcess(
				GetCurrentProcess(),
				ProcessDebugObjectHandle,
				&hProcessDebugObject,
				sizeof(HANDLE),
				&dwReturned);

			if (NT_SUCCESS(status) && (0 != hProcessDebugObject))
				bRet = TRUE;
		}
	}

	wprintf(L"%s\n", (bRet) ? L"yes" : L"no");
	return bRet;
}

BOOL chk_NtQuerySystemInformation()
{
	BOOL bRet = FALSE;

	wprintf(L"[*] NtQuerySystemInformation: ");

	NTSTATUS status;
	SYSTEM_KERNEL_DEBUGGER_INFORMATION SystemInfo;

	status = NtQuerySystemInformation(
		(SYSTEM_INFORMATION_CLASS)0x23,
		&SystemInfo,
		sizeof(SystemInfo),
		NULL
	);

	if (NT_SUCCESS(status) && SystemInfo.DebuggerEnabled && !SystemInfo.DebuggerNotPresent)
		bRet = TRUE;

	wprintf(L"%s\n", (bRet) ? L"yes" : L"no");
	return bRet;
}

BOOL chk_HeapFlags()
{
	BOOL bRet = FALSE;

	wprintf(L"[*] HeapFlags: ");

	PPEB pPeb = (PEB*)(__readgsqword(0x60));
	PVOID pHeapBase = (PVOID)(*(PDWORD_PTR)((PBYTE)pPeb + 0x30));
	DWORD dwHeapFlagsOffset = 0x70;
	DWORD dwHeapForceFlagsOffset = 0x74;

	PDWORD pdwHeapFlags = (PDWORD)((PBYTE)pHeapBase + dwHeapFlagsOffset);
	PDWORD pdwHeapForceFlags = (PDWORD)((PBYTE)pHeapBase + dwHeapForceFlagsOffset);

	bRet = (*pdwHeapFlags & ~HEAP_GROWABLE) || (*pdwHeapForceFlags != 0);

	wprintf(L"%s\n", (bRet) ? L"yes" : L"no");
	return bRet;
}

BOOL chk_HeapProtection()
{
	BOOL bRet = FALSE;

	wprintf(L"[*] HeapProtection: ");

	PROCESS_HEAP_ENTRY HeapEntry = { 0 };
	do
	{
		if (!HeapWalk(GetProcessHeap(), &HeapEntry))
			return false;
	} while (HeapEntry.wFlags != PROCESS_HEAP_ENTRY_BUSY);

	PVOID pOverlapped = (PBYTE)HeapEntry.lpData + HeapEntry.cbData;
	
	bRet = ((DWORD)(*(PDWORD)pOverlapped) == 0xABABABAB);

	wprintf(L"%s\n", (bRet) ? L"yes" : L"no");
	return bRet;
}

BOOL chk_KUSER_SHARED_DATA()
{
	BOOL bRet = FALSE;

	wprintf(L"[*] KUSER_SHARED_DATA: ");

	unsigned char b = *(unsigned char*)0x7ffe02d4;

	bRet = ((b & 0x01) || (b & 0x02));

	wprintf(L"%s\n", (bRet) ? L"yes" : L"no");
	return bRet;
}

BOOL chk_HardwareBreakpoints()
{
	BOOL bRet = FALSE;

	wprintf(L"[*] HardwareBreakpoints: ");

	CONTEXT		Ctx = { 0 }; 
	Ctx.ContextFlags = CONTEXT_DEBUG_REGISTERS;

	GetThreadContext(GetCurrentThread(), &Ctx);

	if (Ctx.Dr0 != NULL || Ctx.Dr1 != NULL || Ctx.Dr2 != NULL || Ctx.Dr3 != NULL)
		bRet = TRUE;

	wprintf(L"%s\n", (bRet) ? L"yes" : L"no");
	return bRet;
}

BOOL chk_DebugBreakCheck()
{
	BOOL bRet = TRUE;

	wprintf(L"[*] DebugBreakCheck: ");

	__try {
		DebugBreak();
	}
	__except (GetExceptionCode() == EXCEPTION_BREAKPOINT ? EXCEPTION_EXECUTE_HANDLER : EXCEPTION_CONTINUE_SEARCH) {
		bRet = FALSE;
	}

	wprintf(L"%s\n", (bRet) ? L"yes" : L"no");
	return bRet;
}

BOOL chk_OutputDebugStringCheck()
{
	BOOL bRet = FALSE;

	wprintf(L"[*] OutputDebugStringCheck: ");

	SetLastError(1);
	OutputDebugStringW(L" ");

	if (GetLastError() == 0)
	{
		bRet = TRUE;
	}

	wprintf(L"%s\n", (bRet) ? L"yes" : L"no");
	return bRet;
}

BOOL chk_QueryPerformanceCounter()
{
	BOOL bRet = FALSE;

	LARGE_INTEGER	Time1 = { 0 }, Time2 = { 0 };

	QueryPerformanceCounter(&Time1);

	chk_IsDebuggerPresent();
	chk_CheckRemoteDebuggerPresent();
	chk_BeingDebugged();
	chk_NtGlobalFlag();
	chk_ProcessDebugFlags();
	chk_ProcessDebugObjectHandle();

	chk_NtQuerySystemInformation();
	chk_HeapFlags();
	chk_HeapProtection();
	chk_KUSER_SHARED_DATA();
	chk_HardwareBreakpoints();
	chk_DebugBreakCheck();
	chk_OutputDebugStringCheck();

	QueryPerformanceCounter(&Time2);

	LONGLONG llDelta = Time2.QuadPart - Time1.QuadPart;
	wprintf(L"[*] QueryPerformanceCounter Delta (%llu): ", llDelta);

	if (llDelta > 100000)
		bRet = TRUE;

	wprintf(L"%s\n", (bRet) ? L"yes" : L"no");
	return bRet;
}

int main()
{
	/*
	chk_IsDebuggerPresent();
	chk_CheckRemoteDebuggerPresent();
	chk_BeingDebugged();
	chk_NtGlobalFlag();
	chk_ProcessDebugFlags();
	chk_ProcessDebugObjectHandle();

	chk_NtQuerySystemInformation();
	chk_HeapFlags();
	chk_HeapProtection();
	chk_KUSER_SHARED_DATA();
	chk_HardwareBreakpoints();
	chk_DebugBreakCheck();
	chk_OutputDebugStringCheck();
	*/
	
	chk_QueryPerformanceCounter();

	wprintf(L"[#] Press any key...");
	getchar();

	return 0;
}