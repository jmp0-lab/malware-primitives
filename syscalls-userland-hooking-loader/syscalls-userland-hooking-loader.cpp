#include <Windows.h>
#include "misc.h"
#include "Whishpers3_NtProtectVirtualMemory.h"

#define DLLNAME L"syscalls-userland-hooking.dll"


BOOL allocateCopyRights(PBYTE pbPayload, SIZE_T sPayload)
{
	LPVOID pAddress = NULL;
	DWORD dwOldProtection = 0;
	BOOL bRet = TRUE;
	int iRet = 0;

	wprintf(L"[#] Press any key to start allocateCopyRights...\n");
	getchar();

	do {
		wprintf(L"\t[i] Allocating memory for payload... ");
		pAddress = VirtualAlloc(NULL, sPayload, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
		if (pAddress == NULL)
		{
			printError(L"VirtualAlloc");
			bRet = FALSE;
			break;
		}
		wprintf(L"done, 0x%p\n", pAddress);

		wprintf(L"\t[i] Copying payload... ");
		memcpy(pAddress, pbPayload, sPayload);
		wprintf(L"done\n");

		// Hook IS triggered for this call
		wprintf(L"\t[i] Adding execution rights... ");
		bRet = VirtualProtect(pAddress, sPayload, PAGE_EXECUTE_READWRITE, &dwOldProtection);
		if (!bRet)
		{
			printError(L"VirtualProtect");
			bRet = FALSE;
			break;
		}
		wprintf(L"done\n");

		// Hook is NOT triggered for this call
		wprintf(L"\t[*] Calling SysWhispers3'd Sw3NtProtectVirtualMemory... ");
		iRet = Sw3NtProtectVirtualMemory(GetCurrentProcess(), &pAddress, &sPayload, PAGE_EXECUTE_READWRITE, &dwOldProtection);
		if (iRet != 0)
		{
			printError(L"Sw3NtProtectVirtualMemory");
			break;
		}
		wprintf(L"done\n");

	} while (FALSE);

	return bRet;
}

int main()
{
	BYTE pbPayload[] =
		"\xfc\x48\x80\x01\x02\x03\x04\x05\x06\x07\x08\x09\x0a\x0b";

	SIZE_T sPayload = (sizeof(pbPayload) / sizeof(BYTE)) - 1;
	BOOL bRet = FALSE;

	HMODULE hDll = NULL;

	do {
		allocateCopyRights(pbPayload, sPayload);

		wprintf(L"[i] Loading DLL with hooks into current process... ");
		hDll = LoadLibraryW(DLLNAME);
		if (!hDll)
		{
			printError(L"LoadLibraryW");
			break;
		}
		wprintf(L"done\n");

		allocateCopyRights(pbPayload, sPayload);

		wprintf(L"[i] Unloading DLL with hooks into current process... ");
		bRet = FreeLibrary(hDll);
		if (!bRet)
		{
			printError(L"FreeLibrary");
			break;
		}
		wprintf(L"done\n");

		allocateCopyRights(pbPayload, sPayload);

	} while (FALSE);

	return 0;
}