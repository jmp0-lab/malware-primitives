#include <Windows.h>
#include <memoryapi.h>
#include "misc.h"
#include "MinHook.h"

// http://undocumented.ntinternals.net/index.html?page=UserMode%2FUndocumented%20Functions%2FMemory%20Management%2FVirtual%20Memory%2FNtProtectVirtualMemory.html

typedef int(WINAPI* fnNtProtectVirtualMemory)(
	IN HANDLE		ProcessHandle,
	IN OUT PVOID*	BaseAddress,
	IN OUT PULONG	NumberOfBytesToProtect,
	IN ULONG		NewAccessProtection,
	OUT PULONG		OldAccessProtection
);

fnNtProtectVirtualMemory g_pNtProtectVirtualMemoryOriginal = NULL;
PVOID g_pNtProtectVirtualMemory = NULL;

int NtProtectVirtualMemoryCustom(
	IN HANDLE		ProcessHandle,
	IN OUT PVOID*	BaseAddress,
	IN OUT PULONG	NumberOfBytesToProtect,
	IN ULONG		NewAccessProtection,
	OUT PULONG		OldAccessProtection
)
{
	WCHAR szAcessProtectionNew[1024] = { 0 };
	//WCHAR szAcessProtectionOld[1024] = { 0 };

	getAccessProtectionString(NewAccessProtection, szAcessProtectionNew);
	//getAccessProtectionString(*OldAccessProtection, szAcessProtectionOld);

	printDebug(L"[NtProtectVirtualMemoryCustom] BaseAddress: 0x%p, NumberOfBytesToProtect: %lu, NewAccessProtection: %s\n",
		*BaseAddress, *NumberOfBytesToProtect, szAcessProtectionNew);

	printHex((PBYTE)(*BaseAddress), *NumberOfBytesToProtect);

	return g_pNtProtectVirtualMemoryOriginal(ProcessHandle, BaseAddress, NumberOfBytesToProtect, NewAccessProtection, OldAccessProtection);
}

int hook()
{
	DWORD dwRet = 0;

	do {
		printDebug(L"[i] Getting NtProtectVirtualMemory address... ");
		g_pNtProtectVirtualMemory = GetProcAddress(GetModuleHandleW(L"NTDLL.DLL"), "NtProtectVirtualMemory");
		if (!g_pNtProtectVirtualMemory)
		{
			printDebug(L"[!] GetProcAddress failed with error: %d", GetLastError());
			break;
		}
		printDebug(L"done\n");

		printDebug(L"[i] Initialize MinHook... ");
		dwRet = MH_Initialize();
		if (dwRet != MH_OK)
		{
			printDebug(L"[!] MH_Initialize failed with error: %d", dwRet);
			break;
		}
		printDebug(L"done\n");

		printDebug(L"[i] Configure to run NtProtectVirtualMemoryCustom in place of NtProtectVirtualMemory... ");
		dwRet = MH_CreateHook(g_pNtProtectVirtualMemory, &NtProtectVirtualMemoryCustom, (LPVOID*)&g_pNtProtectVirtualMemoryOriginal);
		if (dwRet != MH_OK)
		{
			printDebug(L"[!] MH_CreateHook failed with error: %d", dwRet);
			break;
		}
		printDebug(L"done\n");

		printDebug(L"[i] Install hook... ");
		dwRet = MH_EnableHook(g_pNtProtectVirtualMemory);
		if (dwRet != MH_OK)
		{
			printDebug(L"[!] MH_EnableHook failed with error: %d", dwRet);
			break;
		}
		printDebug(L"done\n");

	} while (FALSE);

	return 0;
}

int unhook()
{
	DWORD dwRet = 0;

	do {
		printDebug(L"[i] Uninstall hook... ");
		dwRet = MH_DisableHook(g_pNtProtectVirtualMemory);
		if (dwRet != MH_OK)
		{
			printDebug(L"[!] MH_DisableHook failed with error: %d", dwRet);
			break;
		}
		printDebug(L"done\n");

		printDebug(L"[i] Uninitialize MinHook... ");
		dwRet = MH_Uninitialize();
		if (dwRet != MH_OK)
		{
			printDebug(L"[!] MH_Uninitialize failed with error: %d", dwRet);
			break;
		}
		printDebug(L"done\n");

	} while (FALSE);

	return 0;
}