#include <Windows.h>
#include <corecrt_wstdio.h>
#include "api-hooking-detours.h"
#include "detours.h"

// https://github.com/microsoft/Detours

typedef int(WINAPI* fnMessageBoxW)(
	HWND    hWnd,
	LPCWSTR lpText,
	LPCWSTR lpCaption,
	UINT    uType
);
fnMessageBoxW g_pMessageBoxW = MessageBoxW;

int MessageBoxWCustom(
	HWND    hWnd,
	LPCWSTR lpText,
	LPCWSTR lpCaption,
	UINT    uType
)
{
	wprintf(L"[*] hWnd: 0x%p, lpText: \"%s\", lpCaption: \"%s\", uType: %i\n", hWnd, lpText, lpCaption, uType);

	return g_pMessageBoxW(hWnd, lpText, lpCaption, uType);
}

int main()
{
	DWORD dwRet = 0;

	do {
		MessageBoxW(NULL, L"message #1", L"Detour test", MB_OK);

		wprintf(L"[i] Create Detour transaction... ");
		dwRet = DetourTransactionBegin();
		if (dwRet != NO_ERROR)
		{
			wprintf(L"[!] DetourTransactionBegin failed with error: %d", dwRet);
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Update thread info... ");
		dwRet = DetourUpdateThread(GetCurrentThread());
		if (dwRet != NO_ERROR)
		{
			wprintf(L"[!] DetourUpdateThread failed with error: %d", dwRet);
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Configure to run MessageBoxWCustom in place of MessageBoxW... ");
		dwRet = DetourAttach(&g_pMessageBoxW, MessageBoxWCustom);
		if (dwRet != NO_ERROR)
		{
			wprintf(L"[!] DetourAttach failed with error: %d", dwRet);
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Install hook... ");
		dwRet = DetourTransactionCommit();
		if (dwRet != NO_ERROR)
		{
			wprintf(L"[!] DetourTransactionCommit failed with error: %d", dwRet);
			break;
		}
		wprintf(L"done\n");

		//
		MessageBoxW(NULL, L"message #2", L"Detour test", MB_OK);
		//

		wprintf(L"[i] Create Detour transaction... ");
		dwRet = DetourTransactionBegin();
		if (dwRet != NO_ERROR)
		{
			wprintf(L"[!] DetourTransactionBegin failed with error: %d", dwRet);
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Update thread info... ");
		dwRet = DetourUpdateThread(GetCurrentThread());
		if (dwRet != NO_ERROR)
		{
			wprintf(L"[!] DetourUpdateThread failed with error: %d", dwRet);
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Configure to remove previously installe hook... ");
		dwRet = DetourDetach(&g_pMessageBoxW, MessageBoxWCustom);
		if (dwRet != NO_ERROR)
		{
			wprintf(L"[!] DetourDetach failed with error: %d", dwRet);
			break;
		}
		wprintf(L"done\n");

		wprintf(L"[i] Remove hook... ");
		dwRet = DetourTransactionCommit();
		if (dwRet != NO_ERROR)
		{
			wprintf(L"[!] DetourTransactionCommit failed with error: %d", dwRet);
			break;
		}
		wprintf(L"done\n");

		MessageBoxW(NULL, L"message #3", L"Detour test", MB_OK);

	} while (FALSE);

	return 0;
}